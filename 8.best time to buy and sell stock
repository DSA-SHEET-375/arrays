https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

Kadane's algorithm
If the "profit so far" cur becomes negative, start from 0.
Otherwise add it to current diff p[i] - p[i-1] and update max_so_far (max profit so far).

    def maxProfit(self, p):
        n = len(p)
        max_so_far, cur = 0, 0
        
        for i in range(1,n):
            cur = max(cur + p[i] - p[i-1], 0)
            max_so_far = max(cur, max_so_far)
        return max_so_far   


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0

        maxProfit = 0
        minPurchase = prices[0]
        for i in range(1, len(prices)):		
            maxProfit = max(maxProfit, prices[i] - minPurchase)
            minPurchase = min(minPurchase, prices[i])
        return maxProfit
        
     
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit = 0
        high_buy = 0
        prices = prices[::-1]
        for price in prices:
            if price > high_buy:
                high_buy = price
            if high_buy - price > max_profit:
                max_profit = high_buy - price
        return max_profit
