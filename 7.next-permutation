https://leetcode.com/problems/next-permutation/

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        n = len(nums)
        i = n - 1
        while i > 0 and nums[i-1] >= nums[i]:
            i -= 1

        # use binary search because it's descending order
        if i > 0:
            left, right = i, n - 1
            while left <= right:
                mid = left + (right - left) // 2
                if nums[i-1] < nums[mid]:
                    left = mid + 1
                else:
                    right = mid - 1
            nums[i-1], nums[left-1] = nums[left-1], nums[i-1]

        # reverse
        left, right = i, n - 1
        while left < right:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
            right -= 1

class Solution:
    def nextPermutation(self, N, nums):
        # code here
        l= len(nums)
        if l<=2:
            return nums[::-1]
        p=l-2
        while p>=0 and nums[p]>=nums[p+1]:
            p-=1
        
        if p==-1:
            return nums[::-1]
        
        for i in range(l-1,p,-1):
            if nums[i]>nums[p]:
                nums[i],nums[p]=nums[p],nums[i]
                break
            
        nums[p+1:]= reversed(nums[p+1:])
        return nums


class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        l = len(nums)
        if l==1:
            return nums
        
        i,j=l-1,l-1
        while i and nums[i]<=nums[i-1]:
            i-=1
        if i==0:
            return nums.reverse()
        k=i-1
        while nums[j]<=nums[k]:
            j-=1
        nums[j],nums[k]=nums[k],nums[j]
        l,r=k+1,len(nums)-1
        while l<r:
            nums[l],nums[r]=nums[r],nums[l]
            l+=1
            r-=1
            
            
            
